import React from 'react';
import {useNavigation} from '@react-navigation/native';
import {
  SafeAreaView,
  Text,
  View,
  StyleSheet,
  Button,
  TextInput,
  Keyboard,
  TouchableWithoutFeedback,
} from 'react-native';
import Routes from '../../routes/Routes';
import * as wallet from '../../wallet';
import Toast from 'react-native-toast-message';

const SetupPage = ({route, navigation}) => {
  const [text, setText] = React.useState<string>('');
  const [mnemonic, setMnemonic] = React.useState<string>('');
  const [success, setSuccess] = React.useState<boolean>(false);
  const [password, setPassword] = React.useState<string>('');
  const [useBiometrics, setUseBiometrics] = React.useState<boolean>(false);
  const [passwordType, setPasswordType] =
    React.useState<wallet.PasswordType>('FullPassword');
  const [simplePassword, setSimplePassword] = React.useState<string>('');
  // const navigation = useNavigation();

  const generateRandomMnemonic = () => {
    const _mnemonic = wallet.generateRandomMnemonic();
    setMnemonic(_mnemonic);
  };

  const generateMnemonicByText = () => {
    const _mnemonic = wallet.generateMnemonicByHashingText(text);
    setMnemonic(_mnemonic);
  };

  const goToSetPassword = () => {
    navigation.navigate(Routes.ROOT.SETPASSWORD, {mnemonic, setupComplete});
  };

  const reset = () => {
    setText('');
    setMnemonic('');
    setSuccess(false);
  };

  const setupComplete = (keyInfo: {
    mnemonic: string;
    password: string;
    passwordType: wallet.PasswordType;
    simplePassword: string | undefined;
    useBiometrics: boolean;
  }) => {
    setSuccess(true);
    setMnemonic(keyInfo.mnemonic);
    setPassword(keyInfo.password);
    setPasswordType(keyInfo.passwordType);
    setUseBiometrics(keyInfo.useBiometrics);
    if (keyInfo.simplePassword !== undefined) {
      setSimplePassword(keyInfo.simplePassword);
    }
  };

  const complete = () => {
    // save to storage
    try {
      wallet.setupWallet({
        mnemonic,
        password,
        passwordType,
        simplePassword,
        useBiometrics,
      });
      navigation.replace(Routes.ROOT.TABS);
    } catch (error) {
      let message = (error as Error).message;
      Toast.show({
        type: 'error',
        text1: message,
      });
    }
  };

  const successView = () => {
    return (
      <SafeAreaView style={styles.container}>
        <TouchableWithoutFeedback
          style={styles.container}
          onPress={Keyboard.dismiss}
          accessible={false}>
          <View style={styles.container}>
            <Text>Set simple password</Text>
            <Text>Mnemonic:</Text>
            <Text>{mnemonic}</Text>
            <Text>Password:</Text>
            <Text>{password}</Text>
            <Text>Use Biometrics:</Text>
            <Text>{useBiometrics ? 'use' : 'not use'}</Text>
            <Text>PasswordType:</Text>
            <Text>{passwordType}</Text>
            {simplePassword !== '' ? (
              <View>
                <Text>SimplePassword:</Text>
                <Text>{simplePassword}</Text>
              </View>
            ) : null}

            <Text>
              You need to backup your mnemonic and password in different places.
            </Text>
            <Text>
              You need to remember your simplePassword if you have one.
            </Text>
            <Button title="Reset" onPress={reset} />
            <Button title="Start to use this wallet" onPress={complete} />
          </View>
        </TouchableWithoutFeedback>
      </SafeAreaView>
    );
  };

  if (success) {
    return successView();
  }
  return (
    <SafeAreaView style={styles.container}>
      <TouchableWithoutFeedback
        style={styles.container}
        onPress={Keyboard.dismiss}
        accessible={false}>
        <View style={styles.container}>
          <Text>SetupPage</Text>
          <Text>
            In Doom Wallet, a private key is generated by a mnemonic and a
            password.
          </Text>
          <Text>
            If you forget your password, you can never recover your private.
          </Text>
          <Text>
            First, you need to generate a mnemonic. A mnemonic is a list of
            words.
          </Text>
          <Text>We only support 24 words mnemonic.</Text>
          <Text>
            You can choose to generate a random mnemonic or by hash a given
            text.
          </Text>
          <Button
            title="Generate Random Mnemonic"
            onPress={generateRandomMnemonic}
          />
          <Text>Input some text to generate a mnemonic:</Text>
          <TextInput
            style={styles.textInput}
            placeholder="Type a text to generate a mnemonic"
            onChangeText={newText => setText(newText)}
            defaultValue={text}
          />
          <Button
            title="Generate By Hashing Text"
            onPress={generateMnemonicByText}
          />

          {mnemonic !== '' ? (
            <View>
              <Text>{mnemonic}</Text>
              <Text>Now, you can set password.</Text>
              <Button title="Set password" onPress={goToSetPassword} />
            </View>
          ) : null}
        </View>
      </TouchableWithoutFeedback>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    height: '100%',
    width: '100%',
    // padding: 20,
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
  },
  textInput: {
    height: 40,
    width: '80%',
    borderWidth: 1,
  },
});

export default SetupPage;
